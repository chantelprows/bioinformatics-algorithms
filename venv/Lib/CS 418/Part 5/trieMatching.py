import trieConstruction

tc = trieConstruction.trieConstruction

def prefixTrieMatching(text, trie):
    i = 0
    c = text[i]
    root = 0
    while True:
        if c in trie[root]:
            root = trie[root][c]
            i += 1
            try:
                c = text[i]
            except:
                c = ""
        elif not trie[root]:
            return True
        else:
            return False


def trieMatching(text, patterns):
    trie = tc(patterns)
    textLen = len(text)
    finalList = []
    for i in range(textLen):
        if prefixTrieMatching(text[i:], trie):
            finalList.append(str(i))
    return finalList


patterns = []
f = open("patterns.txt", "r")
f1 = f.readlines()
for pattern in f1:
    patterns.append(pattern.strip('\n'))
f.close()

finalList = trieMatching('CACTCGATTGCGTTAGGGCGGGGCAACCTGGCAAACCTCGAGGTACTTATTGTGTAGTCAGCTGTCAGCTGTGTGGGTGATGTAACAGTCAGCCGGATCACTGATTAACACTTTAATCGAGCCAAGCGTGCGGGTTACTAGATCACCCGTCTTCACACCCGATCTGATTCAGAAAGGGAAATGAGTGTAGTGCTTCGTGTCTTTGATCATCGATCATACAAAAAACCTCCGGGACCCTCCCGCATTCGTGTTTGGCTGCCTTACACTAGGAGAAAGGGAAAAGGGAAACTTAGATTGTGATTTTATTAAATCAATTTTAATAACGCTCCACCTTTCCCTCTAAGTTGCTCATTGGATAATGTCGTATTATGTGGCGCGTGGCGCGTATAGATGTGCACGGCCCGGGTACTCGGCGTCAGTTTAAAGGGAAAAGGGAAACAGGACGTGAAGGACGGTAATTATCGTCGCAGATTACAAAAAACGCACCAAGAAGCAGATCAGCAGGCGTCGACTAAATGAGTATGATGCATCAGTACAGAACTCTAGTTTTGGAGTAACTTCGCGATCCGGTCAGCTGTTTCCTGGGAATATGCTCGAGTAACAAATGGATAGACAAAAAACAAAAAACGTCTCCGCCCTCAAAGGGGGTCAGCTGTCAGCTGTCTTGATGAGGCGTGGCGCGTCAAATCATCGATCATCGATGCGTCTCTGCGCGATGTGTGGCGCGGTCAGCTGTCCGATCATCGATCATCGATGTCCGCCCTCGGAGGTTGTCTGTTTTGCACGTCCGAAAGGGAAACCCGCAACATAAAAGGCGGTGAGCACAGTAATAGGGAATCCGCCCTCGGGTTTAACACTTGAACTGAAGTGGCTCCGGGACCCGGGACCCCCGGGACCCCACTTCCGCCCTCCGCCCTCGGAGAGTTGA', patterns)
#print(" ".join(finalList))