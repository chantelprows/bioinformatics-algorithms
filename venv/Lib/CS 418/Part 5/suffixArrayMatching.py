import suffixArray

sa = suffixArray.suffixArray

def suffixArrayMatching(text, patterns):

    def bisectLeft(array, pattern, text):
        low = 0
        high  = len(array)
        while low < high:
            mid = (low + high) // 2
            if text[array[mid]:] < pattern:
                low = mid + 1
            else:
                high = mid

        def matcher(num):
            return text[num:num + len(pattern)] == pattern

        first = low
        while first > 0 and matcher(array[first - 1]):
            first = first - 1

        last = low
        while matcher(array[last]):
            last = last + 1

        return array[first:last]


    array = sa(text)
    finalArray = []
    for pattern in patterns:
        biArr = bisectLeft(array, pattern, text)
        for pat in biArr:
            finalArray.append(pat)
    return sorted(finalArray)


patterns = []
f = open("patterns.txt", "r")
f1 = f.readlines()
for pattern in f1:
    patterns.append(pattern.strip('\n'))
f.close()

list = suffixArrayMatching('ATTCACACTAAGGTCGCTAAGATGGCGGCCCGAGGAGCTATGAATAACTCTTAAAATCAACAGAAGACGGGACGTGATAGATAGATGAGCAGCTGCAAAATGATAGAGTCAGTAAAGCTCAGTAGCCGTTCGAGTAAGAGCATTAGCGTGGATACTGTGTTAAGAGACCGAGTACATGATCCATCACGTGTAGGGCAGCGGCGGAGCAGTGTACCATGTTCTATAACGTCAGTGGTCCTTACTCTATGGTCCACCAGAGCTATGAGCTATGATACACATCCCAATTCTTCAACTCTATCGCAACTGGTCATGGCCATTGGCCATTGCAGGGATGACTAGTTCACCTACCCGCGTGGGTGGTTTGCTAACAATACAGGAACTCACTCTCGTCTCATTGGTAGTCGCGAGGTGCGAGGTTAGTCCGTATATGAGGAAGCCATGACTCACTCCTCCGCTAAGCCATCTTTAGCGTCCCCATTCCTGTTCGTGTCACACGACAACCCTGCGCCGTAGAGGTCCTTTCGCTTGCATGGGAATTCGAATGTCAGTGGTCAGTGGTAGTCCGTAGTCCGTAAAATCCGTGGTTTCGACCTCGGTAGGTATTTCTGCTATCCTTATGGAAACAGTGGCCGGGTCTAGTCGCTAGCACCCCGTTGTTAATGATCGCCATCGTGTAGATCTCTTAAGAAGACGCTGTCCTGCAGTTAGCCACTGTGGACACTTTAGTCCGTAGTCCGTACTAACCATTGTTAATCGGGCCATCGCCGGAAATGTCCCTACGGTCTATTGAGGGACACATATCTAAAATCTAAAATCTAAAACCTGCTATAAGACTGTAACAGCGGATATAATGGCCATTGTCGCTATGTCGTTCAGCTTGGGGGTACGGTACGGACTAAATCGGGCACTCCGTAATCGCCTGTCTTTTGAGACGTAAACGTACCAGATCATGAGTATGCTTGATGGTACGTTCAGTGGGAACGTCCTGGGCAGTCCTCGTAGGAATAAAATCTAAAATCTATCGGCCCAAGCCCTCCGCTAAAATCTACTAGGTCGAAAGTGCTACTCGGGAAGGCTTATTTATCACGGGGTGTCAGCCTTCGTACCCCAGCCTTGTAGTCGGTCGCATCAGGCATAGTATTGGACGTATAAAGAGCCGATCATCAACGGACAGATATGAGCTACTCTTATATAGTTGGCCATTGAGACCGCAAGCATTCACTGGGCCAAGAGGCTAGCATAATGGCGGTTATGCACTTATCCAGCTTCTCGCTAAATGATATTCGCCGAAATCCCCCCTAGGCTATTAAACGGTCAATGAGGCAACTTGTCCGGGAGAATCCGACGAAACTAATGCTACGTGACCATGAAGAGCACTGAGGATTTGATTGTTAACTAAGAGATAGCGGTCAGTGGTCAGTGGTCTCAATATGAGATCCCACTGTGAAATAAACTAATACGATAGTCTATCGCCTCGTGAGGCTGGTAGCGCGTGCTGTAAGGTATCAACTGCGCCTATCCTTATACGGTGCTGTAGCTCGTCGAGCTATCATCAAACATCAAACACCGCACATTAGCGAGGTGCGAGGTGCACGTCGATGTTACATATGTCAGCGACTTTGGTCGGGTCATGGACTCTACCGACCTCATTCAGTTGGCGCACAAACACCCGAGCATGGGGTGTACTAAGGCGAAGGGTGCCGGTCAATAATATTTTGGGATTCGGTCTAGCCACCGCGGGATGGCTCATTGTGACGATCGCGACATTAGCAGGTCCCGTCCTCACAGGGTGGAGGTCAGTGGTCAGTGGTGCACAAAGACGGCTTTGATCAGTTAGTGTGGCCATTGGCCATTGGGTACCTTACAAAACAAGGTCATATTGAATTGGAGGTACCCATGCGATCATCAAACAGCAAGTTCGAAGACGCCACGTTACTTATTGACATTAGTCTGACGGACTCGGAACTAAGCGGCAGGTCACAACTCATCGACCCAGGTCGACTATTTGCCTGGCCTGGCTATATTTTAGCGAATAGTCCTTTTCGCGGGTCGCGTAACTGGGCATCCCGATCACTCCTTAGGCGCTCGACGAGGGGTGCGAGGTGCGAGGTGCTAGTCGGTTGTGGTTTTAGCATGGCAGAGAACTCATGTCCAATGAAGCTCTCCCTATTTCGATAACAGATCTTTAGTCCGTACAAGTAAGACGCCAATAGCGATGCGCTATCTTTAATCGAAGTCACGTGCAATAAAAGAGCAGGTCATCATCTGGGGGATTATTCCGCGGAGCGAGGTGCCTTCAGGGCCCGACGGAGTGCTTCGTCATCAAACATCAAACAACGGCACCTGCATGTGAAATAGCATCAAACAGACTAGCAATCGATGACGAAGTTTGGCTATCGAATGCCGGGGAGCTATGTGTAGTCGGTAGTCGGTGCTGACTGCATCAAACATCAAACAGAAATATGCTAGTCACGTAGGAACTAGTGCACCTGTTCTCATTGGTTAAAATCTAGTGCGGCAAAGTATTGGGTCCAATAAGGTTCATACCTAAAGCGCAGTTCCGGTAGCAGGGATCTACATCTCGTTAAAATCCATTTCTTCCGAAGATTGGGTTTGGATTCGAATGTGTCAGTGGTCAGTGGTGAGGGGAAACTTTCTTCTAAGTCGAAGGTCACGTTTTAAACGTATGCGCTTGCCGAGGGCCAAGGGCTCCCCCACGGGACGTTACAAAAGCAGCACGGATCGGGTGGAGCTATGATGCTCATGCCCGGAAATGCAGACGCTGAAGGG$', patterns)
finalList =[]
for num in list:
    finalList.append(str(num))

# print(' '.join(finalList))