def greedyMotifSearch(dna, k, t):
    best_motifs = []
    for str in dna:
        best_motifs.append(str[:k])
    for i in range(len(dna[0]) - k + 1):
        motifs = []
        motifs.append(dna[0][i:i+k])
        for j in range(1, t):
            prof = profile(motifs[:j])
            motifs.append(profileMostProbablePattern(dna[j], k, prof))
        if score(motifs) < score(best_motifs):
            best_motifs = motifs
    return '\n'.join(best_motifs)

def profile(motifs):
    count = {}
    profile = {}

    for symbol in "ACGT":
        count[symbol] = []
        for j in range(len(motifs[0])):
            count[symbol].append(0)

    for i in range(len(motifs)):
        for j in range(len(motifs[0])):
            symbol = motifs[i][j]
            count[symbol][j] += 1
    for letter in count.keys():
        profile[letter] = [x / float(len(motifs)) for x in count[letter]]
    return profile

def profileMostProbablePattern(text, k, profile):
    p_dict = {}
    for i in range(len(text) - k + 1):
        p = pr(text[i:i+k], profile)
        p_dict[i] = p
    m = max(p_dict.values())
    keys = [k for k,v in p_dict.items() if v == m]
    ind = keys[0]
    return text[ind:ind+k]

def pr(text, profile):
    p = 1
    for i in range(len(text)):
        p = p * profile[text[i]][i]
    return p

def score(motifs):
    con = consensus(motifs)
    score = 0
    for i in range(len(motifs[0])):
        freq_sym = con[i]
        for j in range(len(motifs)):
            if motifs[j][i] != freq_sym:
                score = score + 1
    return score

def consensus(motifs):
  counter = count(motifs)
  consensus = ""
  for j in range(len(motifs[0])):
      m = 0
      frequentSymbol = ""
      for symbol in "ACGT":
          if counter[symbol][j] > m:
              m = counter[symbol][j]
              frequentSymbol = symbol
      consensus += frequentSymbol
  return consensus


def count(motifs):
    count = {}
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(len(motifs[0])):
            count[symbol].append(0)

    for i in range(len(motifs)):
        for j in range(len(motifs[0])):
            symbol = motifs[i][j]
            count[symbol][j] += 1
    return count

print(greedyMotifSearch(
['GGATACGCAATACAACGTCGAAGCGATTAACGGGCGCAGTAGAGGAGGTATTTAAATCCTAACAGGCTCAGCACGAATGCAGATGTCTACTGCCGCCGACCAGAAGCTAGGCCCTAAGTAACCCGGGTCGATATTGCTCGGGAATGGTTACTTTGG',
'AAGGGCCTAGTCTATGGCACCTCTACCAAAACTTGAAAAGGCCACTCCAACGATGGATTGCACTAATCCGCCAGGTTAAATAGCCAAGCAATTGTTCTGCAGGTCGCATCGAATGCTCATTACAGTGTCGTACGACAACGGGCGAGTCTCCTAGAG',
'ACGAATGCCTATCTTTACGACCACTTCTCGCGAAGAGGCACCATGCAACTTATACCTTGGGAAAAGTCGACGGCCATACAGAATCCCTGTCTGAATCCTAGGCGAACTATGACAGCGCTATTCATGATGTGCGGGTACTCTATACGGTACAAACTA',
'GCACTCAGCGACCCTATCAGTATTTCACACGGATGCGCGAAACCACCTTACATAGATCATGTATAGCAGTTTCTAGGAGGAATGCCGAACGCCGATTTCAGTTAACGGCCCCAAAACTCCACTAAGAACAACCGCAAAATCCGAGATATTGATCCG',
'TTGTACGCTCGACGGATACTGTCCACCACATGTCCCAGGTTTCGGGGAACGAAAGCAAATCGAGTGTGAAAACCTTATAACACTATACTATGAAAATGCTCGACGTGGCGAAGCGCAGGCCGCCGAACAGATGGGGCGTTACGGGTCTACTTGGAA',
'CTGCAGCGCAGCCGGGGAACCTGCACTGACCGACTCCACAATCTTTTCTACCACCTTATACGACCACGTCCAGTTCGTACCTGGAAGCCGCAGGCACTTAGTGATGCAAAGAGCTATGACGCGAAAGCTCATTTATCGTGAGCTTAGAAATCGTAT',
'GGCAGACTGATACGACGCTCTAAGGGTTCTCACCAAAGCCGAAGACGACTGCCCCCGGTGAGACGCTGTGACAGTTTGCCGGACGAGGGAGGGGATTCAGATTATATAGCCCTTGGTACAATTATATCACGATATCACTACAACGCGAATGCGAAT',
'ATCCGGAAGGGGCTTTGAGCAAAGTCGGGATTTCTGGTAGAGTTGCCCCGGGTTCGCTCCTTTTCCTCTTTTAGCTCTTCTATGTTTCTACCGGTTTAGTCTACCGCGACCGTGAGGACCCCGAATGCATATGCGTTCCTTGGTTAATCTAGGTAG',
'GGGCCCTGTGGCAGGACTGAAGCGGTAGCAGAGAGACGTTGGTCTACTGTTAAGAGCCACTCGAACGCGGATGCGACGCTGGAGTTTCATCAGAACTACGCATTACGTACCCTTCCATGGCCGCCAAACCAGTAATACGTTACCCGAAATGAATCC',
'GTTGGAGTTGTCTGGTTGCGAACCAAAGAGGAAGCCCCGGAATCGCCGGTGGCCCTGCCGTGTAGGTATGAATAACGACGTCCCGTAGCTCCTACGCTGACATCCGATTGTAATACCATCTTGATGCTACGCACGAACGCGCATGAGTCGATATCT',
'ACGAAGGCCTATCCCCGTATTGCAGAATAAGGCGGATGGTGGTCTGGATCAGGATCACACAGAGATCGGCGTCGGACCAAAATGCAAAGGCCACCATCGTCGCGATCAAAAGAGCCCGAAGTCCGGCTATATGAGCGCAAACGATCGTCGTGACTT',
'CACTATCATTTTCCGAACGCCGATCTCAATAGCAAATCAGTTGATAGCTCATCTGACCATGGCCCCCTTGTGTCTCGTCGGGAGACTGGAGTTATCTTGTCCACCAGGAGTTGATAAATTGCATCGTAAAAGGCACGAGGAACATGCTAAGCTCCC',
'GCCAACAGTAATAGCATGGACATTTGCACACGGCCTGCGCACCGAGCGCTACTCAGACGAAGCCGCCGAACATTTTTGAGGTTGTGGAGGGTTGGGTGAGCAGGTTCTATAACCTAACGCACGAAGGCTTATTACCATTTTCCATTTGGTATGCAT',
'GAACACGAAACGGGTCTTCCTGTAGCTGAACAGAAACGTCGAAGTAAGACGCCTGTATGGCCATCGGCACGACCGAACGCGTATACAGGCCCGTTAAGACCTCGCGACTTATTCGAGGTTACCTTGAGCTCAACCCCTTCCAGTCCTTTCTGCACC',
'TGTTCCACTCTTCGACAAGACCACACCACTTTAGTATCGAAAGCGTATAGCATGCCACACTTGCGGGGTATGATGGCCTCTACGTAACAATAGCAACTGTAGTTGACAGACGATATATGGGCCGTGTCCGGGAGGTCTTCATTAACCATAAGACAA',
'TCCGTAAATATAGCGATAAGCAATGTGGCTTCCTTCATTATCGGACTCCGGGGAAGTGGGCCTAACCCTCAGTACGTTTCTTGGCCGTAACAGGTGTGGATAAGGGGGAAGGTCAAACAGAGTCATTCCAGTCACCGGGCGTACACGAATGCTAAT',
'AACCCAGAAGAGCTTATTTAGAAGCCGATTCCGGAGGAATTTTGCCATGATTCCGCAGGAACAAGCTGGCTAACGCTGATGAAACAAGGGCCACGGGTCCAACGGCCTCCGAACGCCCATCCCAGACAGACATGACACGATAGTGACTCCCCTTAA',
'CTTAATGTGAGTTATATCTTGTACGTCGGGTGGGAATGACGGTGCGCGTGGGGGCCAACTGCCAAAGAGCGTCAAGTTGACATACTGCGATTTGTATGCATGGGTAAAACGAACGCAGATCCATCCATTCCATGGCGATCCGAAGAACCAGGGGTG',
'TGTTTCTGCTGAAGAGCACTGAAGATGTCGCGTCCTATCACTGACAACATAGGAATACCTTTCATTAAATAGGACGGCAAGACAAAATCAAGTTTATCGAAGGCGAATCGGACCGGCCTTTTCTACCACTCCGGTTGACCCCTCCCATGATAACTA',
'GCACATTGTTACGCGTGTGGTGTTAAAACCATAATTAGGTGTAGATGAGCGCATAACTCTGTTGCAGGACTCCATTACGAAGGGACGAACGCTGATGCTCGTATTTAGTTTAGCAATGACTGAATGAGTTAATCGGATACGCCAAACCCGATAGGA',
'TACTACTATGGCGGCGTCCTGGATTTCGATTTCTTGCGCTTCTGCGCCCTCTCTCATAGGTCCTGGTCGACGGGGTCCTCGGAGCGCTGGAAGCAAACCCTTCACAGAATAGACAGACAATCGAACGCTGATCCGTCCGAGAGTGTTCCTTCTCGA',
'TATATTTTCTTAACGAATGCCTATGGCGGCTCAAGTCATTAGTTTGACCATGTATGTAGTGCAATCTAGTACCCAAATGACGAGGGAAAAGCTTAGGTTTATCACGATCCGACCGTGAGAGTTCGTATAGTTCCTGCTCCAACCCACTTGACCGAG',
'CGGCTTTGATCATGATGTAAAAACATTAAGGAAAAATGTTTAATGCTTGACCCAGGGTTGGCGAAAGCCAATGGCTAACACCGTTCTTCTAGCCCTTCCTAGCTTTGTGGAAGAACCTTTATGAGTGGCGTAATCCGCCGACGCGCATGCGCTTGG',
'CTTCTCTGGACTAACTACCAAGTTGATTATTCCGGACGATGCTGTATGTATGTAATAAACTCCTACCATGTGAGCCGTCATTGTCCGAAGGCGTATGGTCACAGCCGGCGATCGACTCTTTACCATGATCTCTTAAAATAGCTATTAGCAGGGGCT',
'GGGGGGATTCCCAGTATCACGTCGAAGTACAGGCCCATATAATATCCGTCGAACGCGCATAGAACGGGTGGTACTAGTAGAACTGTACACCGATCGTTGACTTCCATGGTCGGACAGTCGATAGGTTACTACTCAGCAGTCCCGGTGTCACTCAAC'],
    12, 25))